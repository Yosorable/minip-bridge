{"version":3,"sources":["../src/model/response/index.ts","../src/bridge/index.ts","../src/api/route.ts","../src/api/app.ts","../src/api/ui.ts","../src/api/kvstorage.ts","../src/api/device.ts","../src/api/sqlite/index.ts","../src/api/sqlite/native-api.ts","../src/api/sqlite/core/sqlite-query-iterator.ts","../src/api/sqlite/core/sqlite-database.ts","../src/api/sqlite/core/sqlite-dialect.ts","../src/api/sqlite/core/sqlite-driver.ts","../src/api/sqlite/core/sqlite-connection.ts","../src/api/memory-cache.ts","../src/index.ts"],"sourcesContent":["export enum MResponseStatusCode {\r\n  SUCCESS = 0,\r\n  FAILED = 7,\r\n}\r\n\r\nexport interface MResponse {\r\n  /**\r\n   * Integer, 0 for succeeded, other for failed.\r\n   * Auto reject in promise when failed.\r\n   */\r\n  code: MResponseStatusCode;\r\n  /**\r\n   * Error msg or other info.\r\n   */\r\n  msg?: string;\r\n\r\n  isSuccess(): boolean;\r\n}\r\n\r\nexport interface MResponseWithData<T> extends MResponse {\r\n  data: T;\r\n  hasData(): boolean;\r\n}\r\n","import { MResponseStatusCode } from \"../model\";\r\nimport { MRequest } from \"../model/request\";\r\n\r\ninterface WebKitCallable {\r\n  postMessage: (data: string) => Promise<string>;\r\n}\r\ndeclare global {\r\n  interface Window {\r\n    webkit?: {\r\n      messageHandlers?: {\r\n        MinipNativeInteraction?: WebKitCallable;\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\nlet jsBridge: {\r\n  callNative: <T>(req?: MRequest<T>) => Promise<any>;\r\n  callNativeSync: <T>(req?: MRequest<T>) => any;\r\n};\r\n\r\n// apple webkit\r\nif (window.webkit?.messageHandlers?.MinipNativeInteraction) {\r\n  const _callNative = window.webkit.messageHandlers.MinipNativeInteraction;\r\n  jsBridge = {\r\n    callNative(req) {\r\n      return _callNative\r\n        .postMessage(JSON.stringify(req))\r\n        .then((res) => JSON.parse(res))\r\n        .then((res) => {\r\n          if (res.code === MResponseStatusCode.SUCCESS) {\r\n            res.isSuccess = () => true;\r\n            const hashData = res.data !== null && res.data !== undefined;\r\n            res.hasData = () => hashData;\r\n            return res;\r\n          } else {\r\n            throw new Error(res.msg ?? \"Unknown error, res: \");\r\n          }\r\n        });\r\n    },\r\n    callNativeSync(req) {\r\n      const res = prompt(JSON.stringify(req));\r\n      if (res) {\r\n        const r = JSON.parse(res);\r\n        r.isSuccess = () => true;\r\n        const hashData = r.data !== null && r.data !== undefined;\r\n        r.hasData = () => hashData;\r\n        return r;\r\n      }\r\n      return {\r\n        code: MResponseStatusCode.FAILED,\r\n        msg: \"Unknown error\",\r\n        isSuccess: () => false,\r\n        hasData: () => false,\r\n      };\r\n    },\r\n  };\r\n}\r\n// error\r\nelse {\r\n  jsBridge = {\r\n    callNative() {\r\n      return new Promise((_, reject) => {\r\n        reject(\"Cannot find JavaScript Bridge!!!\");\r\n      });\r\n    },\r\n    callNativeSync() {\r\n      return {\r\n        code: MResponseStatusCode.FAILED,\r\n        msg: \"Cannot find JavaScript Bridge!!!\",\r\n      };\r\n    },\r\n  };\r\n}\r\n\r\nexport default jsBridge;\r\n","import jsBridge from \"../bridge\";\r\nimport { MResponse } from \"../model\";\r\n\r\nexport function navigateTo(data: {\r\n  page: string;\r\n  title?: string;\r\n}): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"navigateTo\",\r\n    data: data,\r\n  });\r\n}\r\n\r\nexport function navigateBack(delta: number = 1): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"navigateBack\",\r\n    data: {\r\n      delta,\r\n    },\r\n  });\r\n}\r\n\r\nexport function redirectTo(data: {\r\n  page: string;\r\n  title?: string;\r\n}): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"redirectTo\",\r\n    data: data,\r\n  });\r\n}\r\n\r\nexport function openWebsite(url: string): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"openWebsite\",\r\n    data: { url },\r\n  });\r\n}\r\n\r\nexport function openSettings(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"openSettings\",\r\n  });\r\n}\r\n","import jsBridge from \"../bridge\";\r\nimport { AppInfo, MResponse, MResponseWithData } from \"../model\";\r\n\r\nexport function closeApp(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"closeApp\",\r\n  });\r\n}\r\n\r\nexport function showAppDetail(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"showAppDetail\",\r\n  });\r\n}\r\n\r\nexport function installApp(url: string): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"installApp\",\r\n    data: {\r\n      url,\r\n    },\r\n  });\r\n}\r\n\r\nexport function getInstalledAppList(): Promise<MResponseWithData<AppInfo[]>> {\r\n  return jsBridge.callNative({\r\n    api: \"getInstalledAppList\",\r\n  });\r\n}\r\n","import jsBridge from \"../bridge\";\r\nimport {\r\n  AlertConfig,\r\n  DateAndTimePickerConfig,\r\n  MResponse,\r\n  MResponseWithData,\r\n  MultipleColumnsPickerConfig,\r\n  ShowHUDRequest,\r\n  SingleColumnPickerConfig,\r\n} from \"../model\";\r\n\r\n// navigation bar\r\n\r\nexport function setNavigationBarTitle(title: string): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"setNavigationBarTitle\",\r\n    data: {\r\n      title,\r\n    },\r\n  });\r\n}\r\n\r\nexport function setNavigationBarColor(config: {\r\n  foregroundColor: string;\r\n  backgroundColor: string;\r\n}): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"setNavigationBarColor\",\r\n    data: config,\r\n  });\r\n}\r\n\r\n// pulldown refresh\r\n\r\nexport function enablePullDownRefresh(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"enablePullDownRefresh\",\r\n  });\r\n}\r\n\r\nexport function disablePullDownRefresh(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"disablePullDownRefresh\",\r\n  });\r\n}\r\n\r\nexport function onPullDownRefresh(callback: (e: Event) => any) {\r\n  window.addEventListener(\"pulldownrefresh\", callback);\r\n}\r\n\r\nexport function startPullDownRefresh(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"startPullDownRefresh\",\r\n  });\r\n}\r\n\r\nexport function stopPullDownRefresh(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"stopPullDownRefresh\",\r\n  });\r\n}\r\n\r\n// HUD\r\n\r\nexport function showHUD(req: ShowHUDRequest): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"showHUD\",\r\n    data: req,\r\n  });\r\n}\r\n\r\nexport function hideHUD(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"hideHUD\",\r\n  });\r\n}\r\n\r\n// alert\r\nexport function showAlert(\r\n  config: AlertConfig,\r\n): Promise<MResponseWithData<string>> {\r\n  return jsBridge.callNative({\r\n    api: \"showAlert\",\r\n    data: config,\r\n  });\r\n}\r\n\r\n// media\r\nexport function previewImage(url: string): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"previewImage\",\r\n    data: {\r\n      url,\r\n    },\r\n  });\r\n}\r\n\r\nexport function previewVideo(url: string): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"previewVideo\",\r\n    data: {\r\n      url,\r\n    },\r\n  });\r\n}\r\n\r\n// picker\r\nexport function showPicker(\r\n  type: \"singleColumn\",\r\n  data: SingleColumnPickerConfig,\r\n): Promise<MResponseWithData<number | null | undefined>>;\r\nexport function showPicker(\r\n  type: \"multipleColumns\",\r\n  data: MultipleColumnsPickerConfig,\r\n): Promise<MResponseWithData<number[] | null | undefined>>;\r\nexport function showPicker(\r\n  type: \"date\" | \"time\",\r\n  data: DateAndTimePickerConfig,\r\n): Promise<MResponseWithData<string | null | undefined>>;\r\n\r\nexport function showPicker(\r\n  type: \"singleColumn\" | \"multipleColumns\" | \"date\" | \"time\",\r\n  data:\r\n    | SingleColumnPickerConfig\r\n    | MultipleColumnsPickerConfig\r\n    | DateAndTimePickerConfig,\r\n): Promise<MResponseWithData<number | number[] | string | null | undefined>> {\r\n  let res;\r\n  if (\r\n    (type === \"time\" || type === \"date\") &&\r\n    !(data as DateAndTimePickerConfig).dateFormat\r\n  ) {\r\n    res = jsBridge.callNative({\r\n      api: \"showPicker\",\r\n      data: {\r\n        type,\r\n        data: {\r\n          ...data,\r\n          dateFormat: type === \"date\" ? \"yyyy-MM-dd\" : \"HH:mm:ss\",\r\n        },\r\n      },\r\n    });\r\n  } else {\r\n    res = jsBridge.callNative({\r\n      api: \"showPicker\",\r\n      data: { type, data },\r\n    });\r\n  }\r\n  return res;\r\n}\r\n","import jsBridge from \"../bridge\";\r\nimport { MResponse, MResponseWithData } from \"../model\";\r\n\r\n// async methods\r\n\r\nexport function getKVStorage(key: string): Promise<MResponseWithData<string>> {\r\n  return jsBridge.callNative({\r\n    api: \"getKVStorage\",\r\n    data: { key },\r\n  });\r\n}\r\n\r\nexport function setKVStorage(key: string, value: string): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"setKVStorage\",\r\n    data: { key, value },\r\n  });\r\n}\r\n\r\nexport function deleteKVStorage(key: string): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"deleteKVStorage\",\r\n    data: { key },\r\n  });\r\n}\r\n\r\nexport function clearKVStorage(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"clearKVStorage\",\r\n  });\r\n}\r\n\r\n// sync methods\r\n\r\nexport function getKVStorageSync(key: string): MResponseWithData<string> {\r\n  return jsBridge.callNativeSync({\r\n    api: \"getKVStorageSync\",\r\n    data: { key },\r\n  });\r\n}\r\n\r\nexport function setKVStorageSync(key: string, value: string): MResponse {\r\n  return jsBridge.callNativeSync({\r\n    api: \"setKVStorageSync\",\r\n    data: { key, value },\r\n  });\r\n}\r\n\r\nexport function deleteKVStorageSync(key: string): MResponse {\r\n  return jsBridge.callNativeSync({\r\n    api: \"deleteKVStorageSync\",\r\n    data: { key },\r\n  });\r\n}\r\n\r\nexport function clearKVStorageSync(): MResponse {\r\n  return jsBridge.callNativeSync({\r\n    api: \"clearKVStorageSync\",\r\n  });\r\n}\r\n","import jsBridge from \"../bridge\";\r\nimport { MResponse, MResponseWithData } from \"../model\";\r\nimport { DeviceInfo } from \"../model/deviceinfo\";\r\n\r\n/**\r\n *\r\n * @param type medium as default\r\n */\r\nexport function vibrate(\r\n  type?: \"light\" | \"medium\" | \"heavy\",\r\n): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"vibrate\",\r\n    data: {\r\n      type: type ?? \"medium\",\r\n    },\r\n  });\r\n}\r\n\r\nexport function getClipboardData(): Promise<MResponseWithData<string>> {\r\n  return jsBridge.callNative({\r\n    api: \"getClipboardData\",\r\n  });\r\n}\r\n\r\nexport function setClipboardData(\r\n  data: string,\r\n): Promise<MResponseWithData<string>> {\r\n  return jsBridge.callNative({\r\n    api: \"setClipboardData\",\r\n    data: {\r\n      data,\r\n    },\r\n  });\r\n}\r\n\r\nexport function scanQRCode(): Promise<\r\n  MResponseWithData<string | undefined | null>\r\n> {\r\n  return jsBridge.callNative({ api: \"scanQRCode\" });\r\n}\r\n\r\nexport function getDeviceInfo(): Promise<MResponseWithData<DeviceInfo>> {\r\n  return jsBridge.callNative({ api: \"getDeviceInfo\" });\r\n}\r\n\r\nexport function getDeviceInfoSync(): MResponseWithData<DeviceInfo> {\r\n  return jsBridge.callNativeSync({ api: \"getDeviceInfoSync\" });\r\n}\r\n","import { Kysely, Migrator, MigratorProps } from \"kysely\";\r\nimport { MinipSqliteDatabase } from \"./core/sqlite-database\";\r\nimport { MinipSqliteDialect } from \"./core/sqlite-dialect\";\r\n\r\nexport interface MinipSqliteMigratorProps extends Omit<MigratorProps, \"db\"> {}\r\n\r\nexport interface OpenSqliteDBProps {\r\n  path: string;\r\n  debug?: boolean;\r\n  migratorProps?: MinipSqliteMigratorProps;\r\n}\r\n\r\nexport function openSqliteDB<T>(props: OpenSqliteDBProps) {\r\n  const dialect = new MinipSqliteDialect({\r\n    database: new MinipSqliteDatabase(props.path, props.debug ?? false),\r\n  });\r\n  const db = new Kysely<T>({\r\n    dialect,\r\n  });\r\n\r\n  if (props.migratorProps) {\r\n    const migrator = new Migrator({\r\n      db,\r\n      ...props.migratorProps,\r\n    });\r\n    return {\r\n      db,\r\n      migrator,\r\n    };\r\n  }\r\n\r\n  return { db };\r\n}\r\n","import jsBridge from \"../../bridge\";\r\nimport { MResponse, MResponseWithData } from \"../../model\";\r\n\r\nexport function sqliteOpenDB(\r\n  path: string,\r\n): Promise<MResponseWithData<{ dbKey: number }>> {\r\n  return jsBridge.callNative({\r\n    api: \"sqliteOpenDB\",\r\n    data: {\r\n      path,\r\n    },\r\n  });\r\n}\r\n\r\nexport function sqliteCloseDB(dbKey: number): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"sqliteCloseDB\",\r\n    data: {\r\n      dbKey,\r\n    },\r\n  });\r\n}\r\n\r\nexport function sqlitePrepare(\r\n  dbKey: number,\r\n  sql: string,\r\n): Promise<MResponseWithData<{ stmtKey: number; reader: boolean }>> {\r\n  return jsBridge.callNative({\r\n    api: \"sqlitePrepare\",\r\n    data: {\r\n      dbKey,\r\n      sql,\r\n    },\r\n  });\r\n}\r\n\r\nexport function sqliteStatementAll(\r\n  dbKey: number,\r\n  stmtKey: number,\r\n  parameters: ReadonlyArray<unknown>,\r\n): Promise<MResponseWithData<unknown[]>> {\r\n  return jsBridge.callNative({\r\n    api: \"sqliteStatementAll\",\r\n    data: {\r\n      dbKey,\r\n      stmtKey,\r\n      parameters,\r\n    },\r\n  });\r\n}\r\n\r\nexport function sqliteStatementRun(\r\n  dbKey: number,\r\n  stmtKey: number,\r\n  parameters: ReadonlyArray<unknown>,\r\n): Promise<\r\n  MResponseWithData<{\r\n    changes: number | bigint;\r\n    lastInsertRowid: number | bigint;\r\n  }>\r\n> {\r\n  return jsBridge.callNative({\r\n    api: \"sqliteStatementRun\",\r\n    data: {\r\n      dbKey,\r\n      stmtKey,\r\n      parameters,\r\n    },\r\n  });\r\n}\r\n\r\nexport function sqliteExecute(\r\n  dbKey: number,\r\n  sql: string,\r\n  parameters: ReadonlyArray<unknown>,\r\n): Promise<\r\n  MResponseWithData<{\r\n    reader: boolean;\r\n    runRes?: {\r\n      changes: number | bigint;\r\n      lastInsertRowid: number | bigint;\r\n    };\r\n    entityData?: unknown[];\r\n  }>\r\n> {\r\n  return jsBridge.callNative({\r\n    api: \"sqliteExecute\",\r\n    data: {\r\n      dbKey,\r\n      sql,\r\n      parameters,\r\n    },\r\n  });\r\n}\r\n\r\nexport function sqliteCreateIterator(\r\n  dbKey: number,\r\n  stmtKey: number,\r\n  parameters: ReadonlyArray<unknown>,\r\n): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"sqliteCreateIterator\",\r\n    data: {\r\n      dbKey,\r\n      stmtKey,\r\n      parameters,\r\n    },\r\n  });\r\n}\r\n\r\nexport function sqliteIteratorNext(\r\n  dbKey: number,\r\n  stmtKey: number,\r\n): Promise<MResponseWithData<unknown | undefined>> {\r\n  return jsBridge.callNative({\r\n    api: \"sqliteIteratorNext\",\r\n    data: {\r\n      dbKey,\r\n      stmtKey,\r\n    },\r\n  });\r\n}\r\n\r\nexport function sqliteIteratorRelease(\r\n  dbKey: number,\r\n  stmtKey: number,\r\n): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"sqliteIteratorRelease\",\r\n    data: {\r\n      dbKey,\r\n      stmtKey,\r\n    },\r\n  });\r\n}\r\n","import {\r\n  sqliteCreateIterator,\r\n  sqliteIteratorNext,\r\n  sqliteIteratorRelease,\r\n} from \"../native-api\";\r\n\r\nexport class MinipSQLiteQueryIterator\r\n  implements AsyncIterableIterator<unknown>\r\n{\r\n  readonly dbKey: number;\r\n  readonly stmtKey: number;\r\n  readonly parameters: ReadonlyArray<unknown>;\r\n  created: boolean = false;\r\n\r\n  constructor(\r\n    dbKey: number,\r\n    stmtKey: number,\r\n    parameters: ReadonlyArray<unknown>,\r\n  ) {\r\n    this.dbKey = dbKey;\r\n    this.stmtKey = stmtKey;\r\n    this.parameters = parameters;\r\n  }\r\n\r\n  public async next(): Promise<IteratorResult<unknown>> {\r\n    if (!this.created) {\r\n      await sqliteCreateIterator(this.dbKey, this.stmtKey, this.parameters);\r\n      this.created = true;\r\n    }\r\n    const res = await sqliteIteratorNext(this.dbKey, this.stmtKey);\r\n    if (res.hasData()) return { value: res.data, done: false };\r\n    return { value: undefined, done: true };\r\n  }\r\n\r\n  public async return(): Promise<IteratorResult<unknown>> {\r\n    if (this.created) {\r\n      await sqliteIteratorRelease(this.dbKey, this.stmtKey);\r\n    }\r\n    return { value: undefined, done: true };\r\n  }\r\n\r\n  [Symbol.asyncIterator](): AsyncIterableIterator<unknown> {\r\n    return this;\r\n  }\r\n}\r\n","import { MinipSqliteStatement } from \"./sqlite-statement\";\r\nimport {\r\n  sqliteCloseDB,\r\n  sqliteOpenDB,\r\n  sqlitePrepare,\r\n  sqliteStatementAll,\r\n  sqliteStatementRun,\r\n} from \"../native-api\";\r\nimport { MinipSQLiteQueryIterator } from \"./sqlite-query-iterator\";\r\n\r\nexport class MinipSqliteDatabase {\r\n  path: string;\r\n  id: number;\r\n  debug: boolean;\r\n  constructor(path: string, debug: boolean) {\r\n    this.path = path;\r\n    this.id = -1;\r\n    this.debug = debug;\r\n  }\r\n  async close(): Promise<void> {\r\n    if (this.id === -1) return;\r\n    await sqliteCloseDB(this.id);\r\n  }\r\n  async prepare(sql: string): Promise<MinipSqliteStatement> {\r\n    if (this.id === -1) {\r\n      const res = await sqliteOpenDB(this.path);\r\n      this.id = res.data.dbKey;\r\n    }\r\n\r\n    const dbKey = this.id;\r\n    const stmtRes = await sqlitePrepare(dbKey, sql);\r\n\r\n    const stmtKey = stmtRes.data.stmtKey;\r\n    const reader = stmtRes.data.reader;\r\n\r\n    return {\r\n      reader: reader,\r\n      all(parameters) {\r\n        return sqliteStatementAll(dbKey, stmtKey, parameters).then(\r\n          (res) => res.data,\r\n        );\r\n      },\r\n      run(parameters) {\r\n        return sqliteStatementRun(dbKey, stmtKey, parameters).then(\r\n          (res) => res.data,\r\n        );\r\n      },\r\n      iterate(parameters) {\r\n        return new MinipSQLiteQueryIterator(dbKey, stmtKey, parameters);\r\n      },\r\n    };\r\n  }\r\n}\r\n","import {\r\n  DatabaseIntrospector,\r\n  Dialect,\r\n  DialectAdapter,\r\n  Driver,\r\n  Kysely,\r\n  QueryCompiler,\r\n  SqliteAdapter,\r\n  SqliteIntrospector,\r\n  SqliteQueryCompiler,\r\n} from \"kysely\";\r\nimport { MinipSqliteDialectConfig } from \"./sqlite-dialect-config\";\r\nimport { MinipSqliteDriver } from \"./sqlite-driver\";\r\n\r\nexport class MinipSqliteDialect implements Dialect {\r\n  readonly #config: MinipSqliteDialectConfig;\r\n\r\n  constructor(config: MinipSqliteDialectConfig) {\r\n    this.#config = config;\r\n  }\r\n\r\n  createDriver(): Driver {\r\n    return new MinipSqliteDriver(this.#config);\r\n  }\r\n  createQueryCompiler(): QueryCompiler {\r\n    return new SqliteQueryCompiler();\r\n  }\r\n  createAdapter(): DialectAdapter {\r\n    return new SqliteAdapter();\r\n  }\r\n  createIntrospector(db: Kysely<any>): DatabaseIntrospector {\r\n    return new SqliteIntrospector(db);\r\n  }\r\n}\r\n","import {\r\n  CompiledQuery,\r\n  DatabaseConnection,\r\n  Driver,\r\n  TransactionSettings,\r\n} from \"kysely\";\r\nimport { MinipSqliteDialectConfig } from \"./sqlite-dialect-config\";\r\nimport { MinipSqliteConnection } from \"./sqlite-connection\";\r\nimport { MinipSqliteDatabase } from \"./sqlite-database\";\r\n\r\nexport class MinipSqliteDriver implements Driver {\r\n  readonly #config: MinipSqliteDialectConfig;\r\n\r\n  #db?: MinipSqliteDatabase;\r\n  #connection?: MinipSqliteConnection;\r\n\r\n  constructor(config: MinipSqliteDialectConfig) {\r\n    this.#config = config;\r\n  }\r\n\r\n  async init() {\r\n    this.#db = this.#config.database;\r\n    this.#connection = new MinipSqliteConnection(this.#db);\r\n    if (this.#config.onCreateConnection) {\r\n      await this.#config.onCreateConnection(this.#connection);\r\n    }\r\n  }\r\n  async acquireConnection(): Promise<MinipSqliteConnection> {\r\n    return this.#connection!;\r\n  }\r\n  async beginTransaction(\r\n    connection: DatabaseConnection,\r\n    settings: TransactionSettings,\r\n  ): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw(\"begin\"));\r\n  }\r\n  async commitTransaction(connection: DatabaseConnection): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw(\"commit\"));\r\n  }\r\n  async rollbackTransaction(connection: DatabaseConnection): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw(\"rollback\"));\r\n  }\r\n  async releaseConnection(connection: DatabaseConnection): Promise<void> {}\r\n  async destroy(): Promise<void> {\r\n    this.#db?.close();\r\n  }\r\n}\r\n","import {\r\n  CompiledQuery,\r\n  DatabaseConnection,\r\n  QueryResult,\r\n  SelectQueryNode,\r\n} from \"kysely\";\r\nimport { MinipSqliteDatabase } from \"./sqlite-database\";\r\n\r\nexport class MinipSqliteConnection implements DatabaseConnection {\r\n  readonly #db: MinipSqliteDatabase;\r\n\r\n  constructor(db: MinipSqliteDatabase) {\r\n    this.#db = db;\r\n  }\r\n  async executeQuery<R>(compiledQuery: CompiledQuery): Promise<QueryResult<R>> {\r\n    const { sql, parameters } = compiledQuery;\r\n    if (this.#db.debug) {\r\n      console.debug(sql, parameters);\r\n    }\r\n    const stmt = await this.#db.prepare(sql);\r\n\r\n    if (stmt.reader) {\r\n      return {\r\n        rows: (await stmt.all(parameters)) as R[],\r\n      };\r\n    } else {\r\n      const { changes, lastInsertRowid } = await stmt.run(parameters);\r\n\r\n      const numAffectedRows =\r\n        changes !== undefined && changes !== null ? BigInt(changes) : undefined;\r\n\r\n      return {\r\n        numUpdatedOrDeletedRows: numAffectedRows,\r\n        numAffectedRows,\r\n        insertId:\r\n          lastInsertRowid !== undefined && lastInsertRowid !== null\r\n            ? BigInt(lastInsertRowid)\r\n            : undefined,\r\n        rows: [],\r\n      };\r\n    }\r\n  }\r\n  async *streamQuery<R>(\r\n    compiledQuery: CompiledQuery,\r\n    _chunkSize: number,\r\n  ): AsyncIterableIterator<QueryResult<R>> {\r\n    const { sql, parameters, query } = compiledQuery;\r\n    const stmt = await this.#db.prepare(sql);\r\n    if (SelectQueryNode.is(query)) {\r\n      const iter = stmt.iterate(parameters) as AsyncIterableIterator<R>;\r\n      for await (const row of iter) {\r\n        yield {\r\n          rows: [row],\r\n        };\r\n      }\r\n    } else {\r\n      throw new Error(\r\n        \"Sqlite driver only supports streaming of select queries\",\r\n      );\r\n    }\r\n  }\r\n}\r\n","import jsBridge from \"../bridge\";\r\nimport { MResponse, MResponseWithData } from \"../model\";\r\n\r\nexport function getMemoryStorage(\r\n  key: string,\r\n): Promise<MResponseWithData<string>> {\r\n  return jsBridge.callNative({\r\n    api: \"getMemoryStorage\",\r\n    data: { key },\r\n  });\r\n}\r\n\r\nexport function setMemoryStorage(\r\n  key: string,\r\n  value: string,\r\n): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"setMemoryStorage\",\r\n    data: { key, value },\r\n  });\r\n}\r\nexport function setMemoryStorageIfNotExist(\r\n  key: string,\r\n  value: string,\r\n): Promise<MResponseWithData<boolean>> {\r\n  return jsBridge.callNative({\r\n    api: \"setMemoryStorageIfNotExist\",\r\n    data: { key, value },\r\n  });\r\n}\r\n\r\nexport function removeMemoryStorage(key: string): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"removeMemoryStorage\",\r\n    data: { key },\r\n  });\r\n}\r\n\r\nexport function clearMemoryStorage(): Promise<MResponse> {\r\n  return jsBridge.callNative({\r\n    api: \"clearMemoryStorage\",\r\n  });\r\n}\r\n","export * from \"./api\";\r\nexport * from \"./model\";\r\nexport * from \"./bridge\";\r\n\r\nexport * from \"kysely\";\r\n"],"mappings":"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","names":["MResponseStatusCode","Kysely","CompiledQuery","CompiledQuery","Kysely"]}
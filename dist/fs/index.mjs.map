{"version":3,"sources":["../../src/fs/common.ts","../../src/fs/dir.ts","../../src/utils/utils.ts","../../src/fs/file.ts","../../src/fs/fd.ts"],"sourcesContent":["import jsBridge from \"../bridge\";\r\nimport { MResponseWithData } from \"../types\";\r\nimport { FileStats } from \"../types/filestats\";\r\n\r\nexport async function access(path: string, mode?: number): Promise<void> {\r\n  return jsBridge\r\n    .callNative({\r\n      api: \"fsAccess\",\r\n      data: {\r\n        path,\r\n        mode,\r\n      },\r\n    })\r\n    .then((res) => {\r\n      const r = res as MResponseWithData<boolean>;\r\n      if (!r.hasData() || !r.data) {\r\n        throw new Error(r.msg ?? \"cannot access this file or directory\");\r\n      }\r\n    });\r\n}\r\n\r\nexport function accessSync(path: string, mode?: number) {\r\n  const res = jsBridge.callNativeSync({\r\n    api: \"fsAccessSync\",\r\n    data: {\r\n      path,\r\n      mode,\r\n    },\r\n  }) as MResponseWithData<boolean>;\r\n  if (!res.hasData() || !res.data) {\r\n    throw new Error(res.msg ?? \"cannot access this file or directory\");\r\n  }\r\n}\r\n\r\nexport async function unlink(path: string) {\r\n  await jsBridge.callNative({\r\n    api: \"fsUnlink\",\r\n    data: {\r\n      path,\r\n    },\r\n  });\r\n}\r\n\r\nexport function unlinkSync(path: string) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsUnlinkSync\",\r\n    data: {\r\n      path,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function rename(oldPath: string, newPath: string) {\r\n  await jsBridge.callNative({\r\n    api: \"fsRename\",\r\n    data: {\r\n      oldPath,\r\n      newPath,\r\n    },\r\n  });\r\n}\r\n\r\nexport function renameSync(oldPath: string, newPath: string) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsRenameSync\",\r\n    data: {\r\n      oldPath,\r\n      newPath,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function stat(path: string) {\r\n  const res = (await jsBridge.callNative({\r\n    api: \"fsStat\",\r\n    data: {\r\n      path,\r\n    },\r\n  })) as MResponseWithData<FileStats>;\r\n\r\n  const file = res.data;\r\n\r\n  file.atime = new Date(file.atimeMs);\r\n  file.mtime = new Date(file.mtimeMs);\r\n  file.ctime = new Date(file.ctimeMs);\r\n  file.birthtime = new Date(file.birthtimeMs);\r\n\r\n  const S_IFDIR = 0o040000;\r\n  const S_IFREG = 0o100000;\r\n  const S_IFLNK = 0o120000;\r\n\r\n  file.isDirectory = function () {\r\n    return (this.mode & S_IFDIR) === S_IFDIR;\r\n  };\r\n\r\n  file.isFile = function () {\r\n    return (this.mode & S_IFREG) === S_IFREG;\r\n  };\r\n\r\n  file.isSymbolicLink = function () {\r\n    return (this.mode & S_IFLNK) === S_IFLNK;\r\n  };\r\n\r\n  return file;\r\n}\r\n\r\nexport function statSync(path: string) {\r\n  const res = jsBridge.callNativeSync({\r\n    api: \"fsStatSync\",\r\n    data: {\r\n      path,\r\n    },\r\n  }) as MResponseWithData<FileStats>;\r\n\r\n  const file = res.data;\r\n\r\n  file.atime = new Date(file.atimeMs);\r\n  file.mtime = new Date(file.mtimeMs);\r\n  file.ctime = new Date(file.ctimeMs);\r\n  file.birthtime = new Date(file.birthtimeMs);\r\n\r\n  const S_IFDIR = 0o040000;\r\n  const S_IFREG = 0o100000;\r\n  const S_IFLNK = 0o120000;\r\n\r\n  file.isDirectory = function () {\r\n    return (this.mode & S_IFDIR) === S_IFDIR;\r\n  };\r\n\r\n  file.isFile = function () {\r\n    return (this.mode & S_IFREG) === S_IFREG;\r\n  };\r\n\r\n  file.isSymbolicLink = function () {\r\n    return (this.mode & S_IFLNK) === S_IFLNK;\r\n  };\r\n\r\n  return file;\r\n}\r\n\r\nexport async function rm(path: string) {\r\n  await jsBridge.callNative({\r\n    api: \"fsRm\",\r\n    data: {\r\n      path,\r\n    },\r\n  });\r\n}\r\n\r\nexport function rmSync(path: string) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsRmSync\",\r\n    data: {\r\n      path,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function cp(src: string, dest: string, recursive?: boolean) {\r\n  await jsBridge.callNative({\r\n    api: \"fsCp\",\r\n    data: {\r\n      src,\r\n      dest,\r\n      recursive,\r\n    },\r\n  });\r\n}\r\n\r\nexport function cpSync(src: string, dest: string, recursive?: boolean) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsCpSync\",\r\n    data: {\r\n      src,\r\n      dest,\r\n      recursive,\r\n    },\r\n  });\r\n}","import jsBridge from \"../bridge\";\r\nimport { MResponseWithData } from \"../types\";\r\n\r\nexport async function mkdir(path: string, recursive: boolean = true) {\r\n  await jsBridge.callNative({\r\n    api: \"fsMkdir\",\r\n    data: {\r\n      path,\r\n      recursive\r\n    }\r\n  })\r\n}\r\n\r\nexport function mkdirSync(path: string, recursive: boolean = true) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsMkdirSync\",\r\n    data: {\r\n      path,\r\n      recursive\r\n    }\r\n  })\r\n}\r\n\r\nexport function readDir(path: string): Promise<string[]> {\r\n  return jsBridge.callNative({\r\n    api: \"fsReadDir\",\r\n    data: {\r\n      path\r\n    }\r\n  }).then(res => res as MResponseWithData<string[]>)\r\n    .then(res => res.data)\r\n}\r\n\r\nexport function readDirSync(path: string): string[] {\r\n  const res = jsBridge.callNativeSync({\r\n    api: \"fsReadDirSync\",\r\n    data: {\r\n      path\r\n    }\r\n  }) as MResponseWithData<string[]>\r\n  return res.data\r\n}\r\n\r\nexport async function rmdir(path: string, force?: boolean) {\r\n  await jsBridge.callNative({\r\n    api: \"fsRmdir\",\r\n    data: {\r\n      path,\r\n      force\r\n    }\r\n  })\r\n}\r\n\r\nexport function rmdirSync(path: string, force?: boolean) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsRmdirSync\",\r\n    data: {\r\n      path,\r\n      force\r\n    }\r\n  })\r\n}\r\n","export function arrayBufferToBase64(buffer: ArrayBuffer, offset: number = 0, length: number = 0): string {\n    if (length === 0) {\n        length = buffer.byteLength;\n    }\n    const arrayBuffer = (offset === 0 && length === buffer.byteLength) ? buffer : buffer.slice(offset, offset + length);\n    let binary = '';\n    const bytes = new Uint8Array(arrayBuffer);\n    const len = bytes.byteLength;\n\n    for (let i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n\n    return btoa(binary);\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n\nexport function base64SetToArrayBuffer(base64: string, buffer: ArrayBuffer, offset: number): number {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[offset + i] = binaryString.charCodeAt(i);\n    }\n    return binaryString.length;\n}","import jsBridge from \"../bridge\";\r\nimport { MResponseWithData } from \"../types\";\r\nimport { base64ToArrayBuffer } from \"../utils/utils\";\r\nimport { arrayBufferToBase64 } from \"../utils/utils\";\r\n\r\nexport function readFile(path: string): Promise<ArrayBuffer> {\r\n  return jsBridge.callNative({\r\n    api: \"fsReadFile\",\r\n    data: {\r\n      path\r\n    }\r\n  }).then(res => (res as MResponseWithData<string>).data)\r\n    .then(res => base64ToArrayBuffer(res))\r\n}\r\n\r\nexport function readFileSync(path: string): ArrayBuffer {\r\n  const res = jsBridge.callNativeSync({\r\n    api: \"fsReadFileSync\",\r\n    data: {\r\n      path\r\n    }\r\n  }) as MResponseWithData<string>\r\n  return base64ToArrayBuffer(res.data)\r\n}\r\n\r\nexport async function writeFile(path: string, data: ArrayBuffer | string) {\r\n  let base64 = \"\"\r\n  if (data instanceof ArrayBuffer) {\r\n    base64 = arrayBufferToBase64(data)\r\n  } else {\r\n    const encoder = new TextEncoder();\r\n    const uint8Array = encoder.encode(data);\r\n    const arrayBuffer = uint8Array.buffer;\r\n    base64 = arrayBufferToBase64(arrayBuffer as ArrayBuffer)\r\n  }\r\n\r\n\r\n  await jsBridge.callNative({\r\n    api: \"fsWriteFile\",\r\n    data: {\r\n      path,\r\n      data: base64\r\n    }\r\n  })\r\n}\r\n\r\nexport function writeFileSync(path: string, data: ArrayBuffer | string) {\r\n  let base64 = \"\"\r\n  if (data instanceof ArrayBuffer) {\r\n    base64 = arrayBufferToBase64(data)\r\n  } else {\r\n    const encoder = new TextEncoder();\r\n    const uint8Array = encoder.encode(data);\r\n    const arrayBuffer = uint8Array.buffer;\r\n    base64 = arrayBufferToBase64(arrayBuffer as ArrayBuffer)\r\n  }\r\n\r\n  jsBridge.callNativeSync({\r\n    api: \"fsWriteFileSync\",\r\n    data: {\r\n      path,\r\n      data: base64\r\n    }\r\n  })\r\n}\r\n\r\nexport async function appendFile(path: string, data: ArrayBuffer | string) {\r\n  let base64 = \"\"\r\n  if (data instanceof ArrayBuffer) {\r\n    base64 = arrayBufferToBase64(data)\r\n  } else {\r\n    const encoder = new TextEncoder();\r\n    const uint8Array = encoder.encode(data);\r\n    const arrayBuffer = uint8Array.buffer;\r\n    base64 = arrayBufferToBase64(arrayBuffer as ArrayBuffer)\r\n  }\r\n\r\n  await jsBridge.callNative({\r\n    api: \"fsAppendFile\",\r\n    data: {\r\n      path,\r\n      data: base64\r\n    }\r\n  })\r\n}\r\n\r\nexport function appendFileSync(path: string, data: ArrayBuffer | string) {\r\n  let base64 = \"\"\r\n  if (data instanceof ArrayBuffer) {\r\n    base64 = arrayBufferToBase64(data)\r\n  } else {\r\n    const encoder = new TextEncoder();\r\n    const uint8Array = encoder.encode(data);\r\n    const arrayBuffer = uint8Array.buffer;\r\n    base64 = arrayBufferToBase64(arrayBuffer as ArrayBuffer)\r\n  }\r\n\r\n  jsBridge.callNativeSync({\r\n    api: \"fsAppendFileSync\",\r\n    data: {\r\n      path,\r\n      data: base64\r\n    }\r\n  })\r\n}\r\n\r\nexport async function copyFile(src: string, dest: string) {\r\n  await jsBridge.callNative({\r\n    api: \"fsCopyFile\",\r\n    data: {\r\n      src,\r\n      dest\r\n    }\r\n  })\r\n}\r\n\r\nexport function copyFileSync(src: string, dest: string) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsCopyFileSync\",\r\n    data: {\r\n      src,\r\n      dest\r\n    }\r\n  })\r\n}\r\n\r\nexport async function truncate(path: string, length: number) {\r\n  await jsBridge.callNative({\r\n    api: \"fsTruncate\",\r\n    data: {\r\n      path,\r\n      length\r\n    }\r\n  })\r\n}\r\n\r\nexport function truncateSync(path: string, length: number) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsTruncateSync\",\r\n    data: {\r\n      path,\r\n      length\r\n    }\r\n  })\r\n}","import jsBridge from \"../bridge\";\r\nimport { MResponseWithData } from \"../types\";\r\nimport { FileStats } from \"../types/filestats\";\r\nimport { arrayBufferToBase64, base64SetToArrayBuffer } from \"../utils/utils\";\r\n\r\nexport enum OpenFlags {\r\n  O_RDONLY = 0,\r\n  O_WRONLY = 1,\r\n  O_RDWR = 2,\r\n  O_CREAT = 64,\r\n  O_EXCL = 128,\r\n  O_TRUNC = 512,\r\n  O_APPEND = 1024,\r\n}\r\n\r\nexport function open(path: string, flags: OpenFlags | number, mode?: number) {\r\n  return jsBridge.callNative({\r\n    api: \"fsOpen\",\r\n    data: {\r\n      path,\r\n      flags,\r\n      mode,\r\n    },\r\n  }).then(res => (res as MResponseWithData<number>).data);\r\n}\r\n\r\nexport function openSync(path: string, flags: OpenFlags | number, mode?: number) {\r\n  const res = jsBridge.callNativeSync({\r\n    api: \"fsOpenSync\",\r\n    data: {\r\n      path,\r\n      flags,\r\n      mode,\r\n    },\r\n  }) as MResponseWithData<number>\r\n  return res.data\r\n}\r\n\r\nexport async function close(fd: number) {\r\n  await jsBridge.callNative({\r\n    api: \"fsClose\",\r\n    data: {\r\n      fd,\r\n    },\r\n  })\r\n}\r\n\r\nexport function closeSync(fd: number) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsCloseSync\",\r\n    data: {\r\n      fd,\r\n    },\r\n  })\r\n}\r\n\r\nexport async function fstat(fd: number) {\r\n  const res = await jsBridge.callNative({\r\n    api: \"fsFstat\",\r\n    data: {\r\n      fd,\r\n    },\r\n  }) as MResponseWithData<FileStats>;\r\n\r\n  const file = res.data;\r\n\r\n  file.atime = new Date(file.atimeMs);\r\n  file.mtime = new Date(file.mtimeMs);\r\n  file.ctime = new Date(file.ctimeMs);\r\n  file.birthtime = new Date(file.birthtimeMs);\r\n\r\n  const S_IFDIR = 0o040000;\r\n  const S_IFREG = 0o100000;\r\n  const S_IFLNK = 0o120000;\r\n\r\n  file.isDirectory = function () {\r\n    return (this.mode & S_IFDIR) === S_IFDIR;\r\n  };\r\n\r\n  file.isFile = function () {\r\n    return (this.mode & S_IFREG) === S_IFREG;\r\n  };\r\n\r\n  file.isSymbolicLink = function () {\r\n    return (this.mode & S_IFLNK) === S_IFLNK;\r\n  };\r\n\r\n  return file;\r\n}\r\n\r\nexport function fstatSync(fd: number) {\r\n  const res = jsBridge.callNativeSync({\r\n    api: \"fsFstatSync\",\r\n    data: {\r\n      fd,\r\n    },\r\n  }) as MResponseWithData<FileStats>;\r\n\r\n  const file = res.data;\r\n\r\n  file.atime = new Date(file.atimeMs);\r\n  file.mtime = new Date(file.mtimeMs);\r\n  file.ctime = new Date(file.ctimeMs);\r\n  file.birthtime = new Date(file.birthtimeMs);\r\n\r\n  const S_IFDIR = 0o040000;\r\n  const S_IFREG = 0o100000;\r\n  const S_IFLNK = 0o120000;\r\n\r\n  file.isDirectory = function () {\r\n    return (this.mode & S_IFDIR) === S_IFDIR;\r\n  };\r\n\r\n  file.isFile = function () {\r\n    return (this.mode & S_IFREG) === S_IFREG;\r\n  };\r\n\r\n  file.isSymbolicLink = function () {\r\n    return (this.mode & S_IFLNK) === S_IFLNK;\r\n  };\r\n\r\n  return file;\r\n}\r\n\r\nexport async function ftruncate(fd: number, length: number) {\r\n  await jsBridge.callNative({\r\n    api: \"fsFtruncate\",\r\n    data: {\r\n      fd,\r\n      length\r\n    }\r\n  })\r\n}\r\n\r\nexport function ftruncateSync(fd: number, length: number) {\r\n  jsBridge.callNativeSync({\r\n    api: \"fsFtruncateSync\",\r\n    data: {\r\n      fd,\r\n      length\r\n    }\r\n  })\r\n}\r\n\r\nexport async function read(fd: number, buffer: ArrayBuffer, offset: number, length: number, position?: number) {\r\n  const res = await jsBridge.callNative({\r\n    api: \"fsRead\",\r\n    data: {\r\n      fd,\r\n      length,\r\n      position,\r\n    }\r\n  }) as MResponseWithData<string>;\r\n  return base64SetToArrayBuffer(res.data, buffer, offset);\r\n}\r\n\r\nexport function readSync(fd: number, buffer: ArrayBuffer, offset: number, length: number, position?: number) {\r\n  const res = jsBridge.callNativeSync({\r\n    api: \"fsReadSync\",\r\n    data: {\r\n      fd,\r\n      length,\r\n      position,\r\n    }\r\n  }) as MResponseWithData<string>;\r\n  return base64SetToArrayBuffer(res.data, buffer, offset);\r\n}\r\n\r\nexport function write(fd: number, buffer: ArrayBuffer, offset: number, length: number, position?: number) {\r\n  const base64 = arrayBufferToBase64(buffer, offset, length);\r\n\r\n  return jsBridge.callNative({\r\n    api: \"fsWrite\",\r\n    data: {\r\n      fd,\r\n      data: base64,\r\n      position,\r\n    }\r\n  }).then(res => (res as MResponseWithData<number>).data);\r\n}\r\n\r\nexport function writeSync(fd: number, buffer: ArrayBuffer, offset: number, length: number, position?: number) {\r\n  const base64 = arrayBufferToBase64(buffer, offset, length);\r\n\r\n  return (jsBridge.callNativeSync({\r\n    api: \"fsWriteSync\",\r\n    data: {\r\n      fd,\r\n      data: base64,\r\n      position,\r\n    }\r\n  }) as MResponseWithData<number>).data;\r\n}"],"mappings":"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","names":["OpenFlags"]}
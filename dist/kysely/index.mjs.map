{"version":3,"sources":["../../src/kysely/index.ts","../../src/kysely/core/sqlite-query-iterator.ts","../../src/kysely/core/sqlite-database.ts","../../src/kysely/core/sqlite-dialect.ts","../../src/kysely/core/sqlite-driver.ts","../../src/kysely/core/sqlite-connection.ts"],"sourcesContent":["import { Kysely, Migrator, MigratorProps } from \"kysely\";\r\nimport { MinipSqliteDatabase } from \"./core/sqlite-database\";\r\nimport { MinipSqliteDialect } from \"./core/sqlite-dialect\";\r\n\r\nexport interface MinipSqliteKyselyMigratorProps\r\n  extends Omit<MigratorProps, \"db\"> {}\r\n\r\nexport interface OpenSqliteKyselyDBProps {\r\n  path: string;\r\n  debug?: boolean;\r\n  migratorProps?: MinipSqliteKyselyMigratorProps;\r\n}\r\n\r\nexport interface OpenSqliteKyselyDBWithMigrationProps\r\n  extends OpenSqliteKyselyDBProps {}\r\n\r\nexport function openSqliteKyselyDB<T>(props: {\r\n  path: string;\r\n  debug?: boolean;\r\n}): Kysely<T>;\r\n\r\nexport function openSqliteKyselyDB<T>(props: {\r\n  path: string;\r\n  debug?: boolean;\r\n  migratorProps: MinipSqliteKyselyMigratorProps;\r\n}): {\r\n  db: Kysely<T>;\r\n  migrator: Migrator;\r\n};\r\n\r\nexport function openSqliteKyselyDB<T>(props: OpenSqliteKyselyDBProps) {\r\n  const dialect = new MinipSqliteDialect({\r\n    database: new MinipSqliteDatabase(props.path, props.debug ?? false),\r\n  });\r\n  const db = new Kysely<T>({\r\n    dialect,\r\n  });\r\n\r\n  if (props.migratorProps) {\r\n    const migrator = new Migrator({\r\n      db,\r\n      ...props.migratorProps,\r\n    });\r\n    return {\r\n      db,\r\n      migrator,\r\n    };\r\n  }\r\n\r\n  return db;\r\n}\r\n","import {\r\n  sqliteCreateIterator,\r\n  sqliteIteratorNext,\r\n  sqliteIteratorRelease,\r\n} from \"../../api/sqlite\";\r\n\r\nexport class MinipSQLiteQueryIterator\r\n  implements AsyncIterableIterator<unknown>\r\n{\r\n  readonly dbKey: number;\r\n  readonly stmtKey: number;\r\n  readonly parameters: ReadonlyArray<unknown>;\r\n  created: boolean = false;\r\n\r\n  constructor(\r\n    dbKey: number,\r\n    stmtKey: number,\r\n    parameters: ReadonlyArray<unknown>,\r\n  ) {\r\n    this.dbKey = dbKey;\r\n    this.stmtKey = stmtKey;\r\n    this.parameters = parameters;\r\n  }\r\n\r\n  public async next(): Promise<IteratorResult<unknown>> {\r\n    if (!this.created) {\r\n      await sqliteCreateIterator(this.dbKey, this.stmtKey, this.parameters);\r\n      this.created = true;\r\n    }\r\n    const res = await sqliteIteratorNext(this.dbKey, this.stmtKey);\r\n    if (res.hasData()) return { value: res.data, done: false };\r\n    return { value: undefined, done: true };\r\n  }\r\n\r\n  public async return(): Promise<IteratorResult<unknown>> {\r\n    if (this.created) {\r\n      await sqliteIteratorRelease(this.dbKey, this.stmtKey);\r\n    }\r\n    return { value: undefined, done: true };\r\n  }\r\n\r\n  [Symbol.asyncIterator](): AsyncIterableIterator<unknown> {\r\n    return this;\r\n  }\r\n}\r\n","import { MinipSqliteStatement } from \"./sqlite-statement\";\r\nimport {\r\n  sqliteCloseDB,\r\n  sqliteOpenDB,\r\n  sqlitePrepare,\r\n  sqliteStatementAll,\r\n  sqliteStatementRun,\r\n} from \"../../api/sqlite\";\r\nimport { MinipSQLiteQueryIterator } from \"./sqlite-query-iterator\";\r\n\r\nexport class MinipSqliteDatabase {\r\n  path: string;\r\n  id: number;\r\n  debug: boolean;\r\n  constructor(path: string, debug: boolean) {\r\n    this.path = path;\r\n    this.id = -1;\r\n    this.debug = debug;\r\n  }\r\n  async close(): Promise<void> {\r\n    if (this.id === -1) return;\r\n    await sqliteCloseDB(this.id);\r\n  }\r\n  async prepare(sql: string): Promise<MinipSqliteStatement> {\r\n    if (this.id === -1) {\r\n      const res = await sqliteOpenDB(this.path);\r\n      this.id = res.data.dbKey;\r\n    }\r\n\r\n    const dbKey = this.id;\r\n    const stmtRes = await sqlitePrepare(dbKey, sql);\r\n\r\n    const stmtKey = stmtRes.data.stmtKey;\r\n    const reader = stmtRes.data.reader;\r\n\r\n    return {\r\n      reader: reader,\r\n      all(parameters) {\r\n        return sqliteStatementAll(dbKey, stmtKey, parameters).then(\r\n          (res) => res.data,\r\n        );\r\n      },\r\n      run(parameters) {\r\n        return sqliteStatementRun(dbKey, stmtKey, parameters).then(\r\n          (res) => res.data,\r\n        );\r\n      },\r\n      iterate(parameters) {\r\n        return new MinipSQLiteQueryIterator(dbKey, stmtKey, parameters);\r\n      },\r\n    };\r\n  }\r\n}\r\n","import {\r\n  DatabaseIntrospector,\r\n  Dialect,\r\n  DialectAdapter,\r\n  Driver,\r\n  Kysely,\r\n  QueryCompiler,\r\n  SqliteAdapter,\r\n  SqliteIntrospector,\r\n  SqliteQueryCompiler,\r\n} from \"kysely\";\r\nimport { MinipSqliteDialectConfig } from \"./sqlite-dialect-config\";\r\nimport { MinipSqliteDriver } from \"./sqlite-driver\";\r\n\r\nexport class MinipSqliteDialect implements Dialect {\r\n  readonly #config: MinipSqliteDialectConfig;\r\n\r\n  constructor(config: MinipSqliteDialectConfig) {\r\n    this.#config = config;\r\n  }\r\n\r\n  createDriver(): Driver {\r\n    return new MinipSqliteDriver(this.#config);\r\n  }\r\n  createQueryCompiler(): QueryCompiler {\r\n    return new SqliteQueryCompiler();\r\n  }\r\n  createAdapter(): DialectAdapter {\r\n    return new SqliteAdapter();\r\n  }\r\n  createIntrospector(db: Kysely<any>): DatabaseIntrospector {\r\n    return new SqliteIntrospector(db);\r\n  }\r\n}\r\n","import {\r\n  CompiledQuery,\r\n  DatabaseConnection,\r\n  Driver,\r\n  TransactionSettings,\r\n} from \"kysely\";\r\nimport { MinipSqliteDialectConfig } from \"./sqlite-dialect-config\";\r\nimport { MinipSqliteConnection } from \"./sqlite-connection\";\r\nimport { MinipSqliteDatabase } from \"./sqlite-database\";\r\n\r\nexport class MinipSqliteDriver implements Driver {\r\n  readonly #config: MinipSqliteDialectConfig;\r\n\r\n  #db?: MinipSqliteDatabase;\r\n  #connection?: MinipSqliteConnection;\r\n\r\n  constructor(config: MinipSqliteDialectConfig) {\r\n    this.#config = config;\r\n  }\r\n\r\n  async init() {\r\n    this.#db = this.#config.database;\r\n    this.#connection = new MinipSqliteConnection(this.#db);\r\n    if (this.#config.onCreateConnection) {\r\n      await this.#config.onCreateConnection(this.#connection);\r\n    }\r\n  }\r\n  async acquireConnection(): Promise<MinipSqliteConnection> {\r\n    return this.#connection!;\r\n  }\r\n  async beginTransaction(\r\n    connection: DatabaseConnection,\r\n    settings: TransactionSettings,\r\n  ): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw(\"begin\"));\r\n  }\r\n  async commitTransaction(connection: DatabaseConnection): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw(\"commit\"));\r\n  }\r\n  async rollbackTransaction(connection: DatabaseConnection): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw(\"rollback\"));\r\n  }\r\n  async releaseConnection(connection: DatabaseConnection): Promise<void> {}\r\n  async destroy(): Promise<void> {\r\n    this.#db?.close();\r\n  }\r\n}\r\n","import {\r\n  CompiledQuery,\r\n  DatabaseConnection,\r\n  QueryResult,\r\n  SelectQueryNode,\r\n} from \"kysely\";\r\nimport { MinipSqliteDatabase } from \"./sqlite-database\";\r\n\r\nexport class MinipSqliteConnection implements DatabaseConnection {\r\n  readonly #db: MinipSqliteDatabase;\r\n\r\n  constructor(db: MinipSqliteDatabase) {\r\n    this.#db = db;\r\n  }\r\n  async executeQuery<R>(compiledQuery: CompiledQuery): Promise<QueryResult<R>> {\r\n    const { sql, parameters } = compiledQuery;\r\n    if (this.#db.debug) {\r\n      console.debug(sql, parameters);\r\n    }\r\n    const stmt = await this.#db.prepare(sql);\r\n\r\n    if (stmt.reader) {\r\n      return {\r\n        rows: (await stmt.all(parameters)) as R[],\r\n      };\r\n    } else {\r\n      const { changes, lastInsertRowid } = await stmt.run(parameters);\r\n\r\n      const numAffectedRows =\r\n        changes !== undefined && changes !== null ? BigInt(changes) : undefined;\r\n\r\n      return {\r\n        numUpdatedOrDeletedRows: numAffectedRows,\r\n        numAffectedRows,\r\n        insertId:\r\n          lastInsertRowid !== undefined && lastInsertRowid !== null\r\n            ? BigInt(lastInsertRowid)\r\n            : undefined,\r\n        rows: [],\r\n      };\r\n    }\r\n  }\r\n  async *streamQuery<R>(\r\n    compiledQuery: CompiledQuery,\r\n    _chunkSize: number,\r\n  ): AsyncIterableIterator<QueryResult<R>> {\r\n    const { sql, parameters, query } = compiledQuery;\r\n    const stmt = await this.#db.prepare(sql);\r\n    if (SelectQueryNode.is(query)) {\r\n      const iter = stmt.iterate(parameters) as AsyncIterableIterator<R>;\r\n      for await (const row of iter) {\r\n        yield {\r\n          rows: [row],\r\n        };\r\n      }\r\n    } else {\r\n      throw new Error(\r\n        \"Sqlite driver only supports streaming of select queries\",\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","names":["Kysely","CompiledQuery","CompiledQuery","Kysely"]}